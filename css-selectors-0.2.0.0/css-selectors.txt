-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parsing, rendering and manipulating css selectors in Haskell.
--   
--   A library for parsing, manipulating, and rendering css selectors (not
--   css files, just the selectors).
--   
--   It has a <i>quasiquoter</i> to enable Haskell to validate the css
--   selector at compile time.
--   
--   Currently the css grammar is implemented <i>without</i> the
--   pseudo-classes, pseudo-elements and negations. One can furthermore
--   calculate the specificity of a css-selector, and thus perform an
--   analysis over what css-selector will take precedence.
@package css-selectors
@version 0.2.0.0


-- | A module to encode and decode css selector strings. These are used in
--   the parser and renderer to parse and render css selector strings.
module Css.Selector.Utils

-- | Parse a given css identifier to the content of the identifier.
readIdentifier :: String -> String

-- | Encode a given identifier to its css selector equivalent by escaping
--   certain characters.
encodeIdentifier :: Text -> Text

-- | Check if the given identifier is a valid css selector identifier.
isValidIdentifier :: String -> Bool

-- | Convert the given string to a given object by first checking if it is
--   a valid identifier, and if not raising an error. If it is a valid
--   identifier, the string is packed, and wrapped in the given function.
toIdentifier :: (Text -> a) -> String -> a

-- | Parses a css string literal to a string that ontains the content of
--   that string literal.
readCssString :: String -> String

-- | Convert a string to a css selector string literal. This is done by
--   putting quotes around the content, and escaping certain characters.
encodeString :: Char -> String -> String

-- | Convert a string to a css selector string literal. This is done by
--   putting quotes around the content, and escaping certain characters.
encodeText :: Char -> Text -> Text


-- | A module that defines the tree of types to represent and manipulate a
--   css selector. These data types are members of several typeclasses to
--   make these more useful.
module Css.Selector.Core

-- | A class that defines that the given type can be converted to a css
--   selector value, and has a certain specificity.
class ToCssSelector a

-- | Convert the given element to a <a>Text</a> object that contains the
--   css selector.
toCssSelector :: ToCssSelector a => a -> Text

-- | Lift the given <a>ToCssSelector</a> type object to a
--   <a>SelectorGroup</a>, which is the "root type" of the css selector
--   hierarchy.
toSelectorGroup :: ToCssSelector a => a -> SelectorGroup

-- | Calculate the specificity of the css selector by returing a
--   <a>SelectorSpecificity</a> object.
specificity' :: ToCssSelector a => a -> SelectorSpecificity
toPattern :: ToCssSelector a => a -> Pat
normalize :: ToCssSelector a => a -> a

-- | The type of a single selector. This is a sequence of
--   <a>SelectorSequence</a>s that are combined with a
--   <a>SelectorCombinator</a>.
data Selector

-- | Convert a given <a>SelectorSequence</a> to a <a>Selector</a>.
Selector :: SelectorSequence -> Selector

-- | Create a combined selector where we have a <a>SelectorSequence</a>
--   that is combined with a given <a>SelectorCombinator</a> to a
--   <a>Selector</a>.
Combined :: SelectorSequence -> SelectorCombinator -> Selector -> Selector

-- | A type that contains the possible ways to combine
--   <a>SelectorSequence</a>s.
data SelectorCombinator

-- | The second tag is a descendant of the first one, denoted in css with a
--   space.
Descendant :: SelectorCombinator

-- | The second tag is the (direct) child of the first one, denoted with a
--   <tt>&gt;</tt> in css.
Child :: SelectorCombinator

-- | The second tag is directly preceded by the first one, denoted with a
--   <tt>+</tt> in css.
DirectlyPreceded :: SelectorCombinator

-- | The second tag is preceded by the first one, denoted with a <tt>~</tt>
--   in css.
Preceded :: SelectorCombinator

-- | The root type of a css selector. This is a comma-separated list of
--   selectors.
newtype SelectorGroup
SelectorGroup :: NonEmpty Selector -> SelectorGroup

-- | Unwrap the given <a>NonEmpty</a> list of <a>Selector</a>s from the
--   <a>SelectorGroup</a> object.
[unSelectorGroup] :: SelectorGroup -> NonEmpty Selector

-- | A <a>SelectorSequence</a> is a <a>TypeSelector</a> (that can be
--   <a>Universal</a>) followed by zero, one or more <a>SelectorFilter</a>s
--   these filter the selector further, for example with a <a>Hash</a>, a
--   <a>Class</a>, or an <a>Attrib</a>.
data SelectorSequence

-- | Convert a <a>TypeSelector</a> into a <a>SimpleSelector</a>.
SimpleSelector :: TypeSelector -> SelectorSequence

-- | Apply an additional <a>SelectorFilter</a> to the
--   <a>SelectorSequence</a>.
Filter :: SelectorSequence -> SelectorFilter -> SelectorSequence

-- | Convert the <a>SelectorCombinator</a> to the equivalent css selector
--   text. A space for <a>Descendant</a>, a <tt>&gt;</tt> for <a>Child</a>,
--   a <tt>+</tt> for <a>DirectlyPreceded</a>, and a <tt>~</tt> for
--   <a>Preceded</a>
combinatorText :: SelectorCombinator -> Text

-- | Combines two <a>Selector</a>s with the given
--   <a>SelectorCombinator</a>.
combine :: SelectorCombinator -> Selector -> Selector -> Selector

-- | Combines two <a>Selector</a>s with the <a>Child</a> combinator.
(.>) :: Selector -> Selector -> Selector

-- | Combines two <a>Selector</a>s with the <a>DirectlyPreceded</a>
--   combinator.
(.+) :: Selector -> Selector -> Selector

-- | Combines two <a>Selector</a>s with the <a>Preceded</a> combinator.
(.~) :: Selector -> Selector -> Selector

-- | A type that sums up the different ways to filter a type selector: with
--   an id (hash), a class, and an attribute.
data SelectorFilter

-- | A <a>Hash</a> object as filter.
SHash :: Hash -> SelectorFilter

-- | A <a>Class</a> object as filter.
SClass :: Class -> SelectorFilter

-- | An <a>Attrib</a> object as filter.
SAttrib :: Attrib -> SelectorFilter

-- | Obtain the list of filters that are applied in the given
--   <a>SelectorSequence</a>.
filters :: SelectorSequence -> [SelectorFilter]

-- | Obtain the list of filters that are applied in the given
--   <a>SelectorSequence</a> in <i>reversed</i> order.
filters' :: SelectorSequence -> [SelectorFilter]

-- | Add a given list of <a>SelectorFilter</a>s to the given
--   <a>SelectorSequence</a>. The filters are applied left-to-right.
addFilters :: SelectorSequence -> [SelectorFilter] -> SelectorSequence

-- | An infix variant of the <a>addFilters</a> function.
(.:) :: SelectorSequence -> [SelectorFilter] -> SelectorSequence

-- | The namespace of a css selector tag. The namespace can be <a>NAny</a>
--   (all possible namespaces), or a namespace with a given text (this text
--   can be empty).
data Namespace

-- | A typeselector part that specifies that we accept all namespaces, in
--   css denoted with <tt>*</tt>.
NAny :: Namespace

-- | A typselector part that specifies that we accept a certain namespace
--   name.
Namespace :: Text -> Namespace

-- | The empty namespace. This is <i>not</i> the wildcard namespace
--   (<tt>*</tt>). This is a bidirectional namespace and can thus be used
--   in expressions as well.
pattern NEmpty :: Namespace

-- | The element name of a css selector tag. The element name can be
--   <a>EAny</a> (all possible tag names), or an element name with a given
--   text.
data ElementName

-- | A typeselector part that specifies that we accept all element names,
--   in css denoted with <tt>*</tt>.
EAny :: ElementName

-- | A typeselector part that specifies that we accept a certain element
--   name.
ElementName :: Text -> ElementName

-- | A typeselector is a combination of a selector for a namespace, and a
--   selector for an element name. One, or both can be a wildcard.
data TypeSelector
TypeSelector :: Namespace -> ElementName -> TypeSelector

-- | The selector for the namespace.
[selectorNamespace] :: TypeSelector -> Namespace

-- | The selector for the element name.
[elementName] :: TypeSelector -> ElementName

-- | The universal type selector: a selector that matches all types in all
--   namespaces (including the empty namespace). This pattern is
--   bidirectional and thus can be used in expressions as well.
pattern Universal :: TypeSelector

-- | Construct a <a>TypeSelector</a> with a given <a>Namespace</a> and
--   <a>ElementName</a>.
(.|) :: Namespace -> ElementName -> TypeSelector

-- | A css attribute can come in two flavors: either a constraint that the
--   attribute should exists, or a constraint that a certain attribute
--   should have a certain value (prefix, suffix, etc.).
data Attrib

-- | A constraint that the given <a>AttributeName</a> should exist.
Exist :: AttributeName -> Attrib

-- | A constraint about the value associated with the given
--   <a>AttributeName</a>.
Attrib :: AttributeName -> AttributeCombinator -> AttributeValue -> Attrib

-- | The possible ways to match an attribute with a given value in a css
--   selector.
data AttributeCombinator

-- | The attribute has exactly the value of the value, denoted with
--   <tt>=</tt> in css.
Exact :: AttributeCombinator

-- | The attribute has a whitespace separated list of items, one of these
--   items is the value, denoted with <tt>~=</tt> in css.
Include :: AttributeCombinator

-- | The attribute has a hyphen separated list of items, the first item is
--   the value, denoted with <tt>|=</tt> in css.
DashMatch :: AttributeCombinator

-- | The value is a prefix of the value in the attribute, denoted with
--   <tt>^=</tt> in css.
PrefixMatch :: AttributeCombinator

-- | The value is a suffix of the value in the attribute, denoted with
--   <tt>$=</tt> in css.
SuffixMatch :: AttributeCombinator

-- | The value is a substring of the value in the attribute, denoted with
--   <tt>*=</tt> in css.
SubstringMatch :: AttributeCombinator

-- | An attribute name is a name that optionally has a namespace, and the
--   name of the attribute.
data AttributeName
AttributeName :: Namespace -> Text -> AttributeName

-- | The namespace to which the attribute name belongs. This can be
--   <a>NAny</a> as well.
[attributeNamespace] :: AttributeName -> Namespace

-- | The name of the attribute over which we make a claim.
[attributeName] :: AttributeName -> Text

-- | We use <a>Text</a> as the type to store an attribute value.
type AttributeValue = Text

-- | Create an <a>Attrib</a> where the given <a>AttributeName</a> is
--   constrainted to be exactly the given value.
(.=) :: AttributeName -> AttributeValue -> Attrib

-- | Create an <a>Attrib</a> where the given <a>AttributeName</a> is
--   constrainted such that the attribute is a whitespace seperated list of
--   items, and the value is one of these items.
(.~=) :: AttributeName -> AttributeValue -> Attrib

-- | Create an <a>Attrib</a> where the given <a>AttributeName</a> is
--   constrainted such that the attribute is a dash seperated list of
--   items, and the value is the first of these items.
(.|=) :: AttributeName -> AttributeValue -> Attrib

-- | Create an <a>Attrib</a> where the given <a>AttributeName</a> is
--   constrainted such that the attribute has as prefix the given
--   <a>AttributeValue</a>.
(.^=) :: AttributeName -> AttributeValue -> Attrib

-- | Create an <a>Attrib</a> where the given <a>AttributeName</a> is
--   constrainted such that the attribute has as suffix the given
--   <a>AttributeValue</a>.
(.$=) :: AttributeName -> AttributeValue -> Attrib

-- | Create an <a>Attrib</a> where the given <a>AttributeName</a> is
--   constrainted such that the attribute has as substring the given
--   <a>AttributeValue</a>.
(.*=) :: AttributeName -> AttributeValue -> Attrib

-- | A flipped version of the <a>Attrib</a> data constructor, where one
--   first specifies the conbinator, then the <a>AttributeName</a> and
--   finally the value.
attrib :: AttributeCombinator -> AttributeName -> AttributeValue -> Attrib

-- | Convert the given <a>AttributeCombinator</a> to its css selector
--   counterpart.
attributeCombinatorText :: AttributeCombinator -> AttributeValue

-- | A css class, this is wrapped in a data type. The type only wraps the
--   class name, not the dot prefix.
newtype Class
Class :: Text -> Class

-- | Obtain the name from the class.
[unClass] :: Class -> Text

-- | Filter a given <a>SelectorSequence</a> with a given <a>Class</a>.
(...) :: SelectorSequence -> Class -> SelectorSequence

-- | A css hash (used to match an element with a given id). The type only
--   wraps the hash name, not the hash (<tt>#</tt>) prefix.
newtype Hash
Hash :: Text -> Hash

-- | Obtain the name from the hash.
[unHash] :: Hash -> Text

-- | Filter a given <a>SelectorSequence</a> with a given <a>Hash</a>.
(.#) :: SelectorSequence -> Hash -> SelectorSequence

-- | A datastructure that specifies the selectivity of a css selector. The
--   specificity is calculated based on three integers: <tt>a</tt>,
--   <tt>b</tt> and <tt>c</tt>.
--   
--   The specificity is calculated with <tt>100*a+10*b+c</tt> where
--   <tt>a</tt>, <tt>b</tt> and <tt>c</tt> count certain elements of the
--   css selector.
data SelectorSpecificity

-- | Create a <a>SelectorSpecificity</a> object with a given value for
--   <tt>a</tt>, <tt>b</tt>, and <tt>c</tt>.
SelectorSpecificity :: Int -> Int -> Int -> SelectorSpecificity

-- | Calculate the specificity of a <a>ToCssSelector</a> type object. This
--   is done by calculating the <a>SelectorSpecificity</a> object, and then
--   calculating the value of that object.
specificity :: ToCssSelector a => a -> Int

-- | Calculate the specificity value of the <a>SelectorSpecificity</a>
specificityValue :: SelectorSpecificity -> Int
instance GHC.Show.Show Css.Selector.Core.SelectorGroup
instance GHC.Classes.Ord Css.Selector.Core.SelectorGroup
instance GHC.Classes.Eq Css.Selector.Core.SelectorGroup
instance Data.Data.Data Css.Selector.Core.SelectorGroup
instance GHC.Show.Show Css.Selector.Core.Selector
instance GHC.Classes.Ord Css.Selector.Core.Selector
instance GHC.Classes.Eq Css.Selector.Core.Selector
instance Data.Data.Data Css.Selector.Core.Selector
instance GHC.Show.Show Css.Selector.Core.SelectorSequence
instance GHC.Classes.Ord Css.Selector.Core.SelectorSequence
instance GHC.Classes.Eq Css.Selector.Core.SelectorSequence
instance Data.Data.Data Css.Selector.Core.SelectorSequence
instance GHC.Show.Show Css.Selector.Core.SelectorFilter
instance GHC.Classes.Ord Css.Selector.Core.SelectorFilter
instance GHC.Classes.Eq Css.Selector.Core.SelectorFilter
instance Data.Data.Data Css.Selector.Core.SelectorFilter
instance GHC.Show.Show Css.Selector.Core.Hash
instance GHC.Classes.Ord Css.Selector.Core.Hash
instance GHC.Classes.Eq Css.Selector.Core.Hash
instance Data.Data.Data Css.Selector.Core.Hash
instance GHC.Show.Show Css.Selector.Core.Class
instance GHC.Classes.Ord Css.Selector.Core.Class
instance GHC.Classes.Eq Css.Selector.Core.Class
instance Data.Data.Data Css.Selector.Core.Class
instance GHC.Show.Show Css.Selector.Core.Attrib
instance GHC.Classes.Ord Css.Selector.Core.Attrib
instance GHC.Classes.Eq Css.Selector.Core.Attrib
instance Data.Data.Data Css.Selector.Core.Attrib
instance GHC.Show.Show Css.Selector.Core.AttributeCombinator
instance GHC.Read.Read Css.Selector.Core.AttributeCombinator
instance GHC.Classes.Ord Css.Selector.Core.AttributeCombinator
instance GHC.Classes.Eq Css.Selector.Core.AttributeCombinator
instance GHC.Enum.Enum Css.Selector.Core.AttributeCombinator
instance Data.Data.Data Css.Selector.Core.AttributeCombinator
instance GHC.Enum.Bounded Css.Selector.Core.AttributeCombinator
instance GHC.Show.Show Css.Selector.Core.AttributeName
instance GHC.Classes.Ord Css.Selector.Core.AttributeName
instance GHC.Classes.Eq Css.Selector.Core.AttributeName
instance Data.Data.Data Css.Selector.Core.AttributeName
instance GHC.Show.Show Css.Selector.Core.TypeSelector
instance GHC.Classes.Ord Css.Selector.Core.TypeSelector
instance GHC.Classes.Eq Css.Selector.Core.TypeSelector
instance Data.Data.Data Css.Selector.Core.TypeSelector
instance GHC.Show.Show Css.Selector.Core.ElementName
instance GHC.Classes.Ord Css.Selector.Core.ElementName
instance GHC.Classes.Eq Css.Selector.Core.ElementName
instance Data.Data.Data Css.Selector.Core.ElementName
instance GHC.Show.Show Css.Selector.Core.Namespace
instance GHC.Classes.Ord Css.Selector.Core.Namespace
instance GHC.Classes.Eq Css.Selector.Core.Namespace
instance Data.Data.Data Css.Selector.Core.Namespace
instance GHC.Show.Show Css.Selector.Core.SelectorCombinator
instance GHC.Read.Read Css.Selector.Core.SelectorCombinator
instance GHC.Classes.Ord Css.Selector.Core.SelectorCombinator
instance GHC.Classes.Eq Css.Selector.Core.SelectorCombinator
instance GHC.Enum.Enum Css.Selector.Core.SelectorCombinator
instance Data.Data.Data Css.Selector.Core.SelectorCombinator
instance GHC.Enum.Bounded Css.Selector.Core.SelectorCombinator
instance GHC.Show.Show Css.Selector.Core.SelectorSpecificity
instance Data.Data.Data Css.Selector.Core.SelectorSpecificity
instance Css.Selector.Core.ToCssSelector Css.Selector.Core.SelectorGroup
instance Css.Selector.Core.ToCssSelector Css.Selector.Core.Class
instance Css.Selector.Core.ToCssSelector Css.Selector.Core.Attrib
instance Css.Selector.Core.ToCssSelector Css.Selector.Core.AttributeName
instance Css.Selector.Core.ToCssSelector Css.Selector.Core.Hash
instance Css.Selector.Core.ToCssSelector Css.Selector.Core.Namespace
instance Css.Selector.Core.ToCssSelector Css.Selector.Core.SelectorSequence
instance Css.Selector.Core.ToCssSelector Css.Selector.Core.TypeSelector
instance Css.Selector.Core.ToCssSelector Css.Selector.Core.ElementName
instance Css.Selector.Core.ToCssSelector Css.Selector.Core.SelectorFilter
instance Css.Selector.Core.ToCssSelector Css.Selector.Core.Selector
instance GHC.Base.Semigroup Css.Selector.Core.SelectorGroup
instance GHC.Exts.IsList Css.Selector.Core.SelectorGroup
instance Data.Default.Class.Default Css.Selector.Core.SelectorGroup
instance Language.Haskell.TH.Syntax.Lift Css.Selector.Core.SelectorGroup
instance Text.Blaze.ToMarkup Css.Selector.Core.SelectorGroup
instance Text.Julius.ToJavascript Css.Selector.Core.SelectorGroup
instance Data.Aeson.Types.ToJSON.ToJSON Css.Selector.Core.SelectorGroup
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.SelectorGroup
instance GHC.Base.Semigroup Css.Selector.Core.Selector
instance Data.Default.Class.Default Css.Selector.Core.Selector
instance Language.Haskell.TH.Syntax.Lift Css.Selector.Core.Selector
instance Text.Blaze.ToMarkup Css.Selector.Core.Selector
instance Text.Julius.ToJavascript Css.Selector.Core.Selector
instance Data.Aeson.Types.ToJSON.ToJSON Css.Selector.Core.Selector
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.Selector
instance Data.Default.Class.Default Css.Selector.Core.SelectorSequence
instance Language.Haskell.TH.Syntax.Lift Css.Selector.Core.SelectorSequence
instance Text.Blaze.ToMarkup Css.Selector.Core.SelectorSequence
instance Text.Julius.ToJavascript Css.Selector.Core.SelectorSequence
instance Data.Aeson.Types.ToJSON.ToJSON Css.Selector.Core.SelectorSequence
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.SelectorSequence
instance Language.Haskell.TH.Syntax.Lift Css.Selector.Core.SelectorFilter
instance Text.Blaze.ToMarkup Css.Selector.Core.SelectorFilter
instance Text.Julius.ToJavascript Css.Selector.Core.SelectorFilter
instance Data.Aeson.Types.ToJSON.ToJSON Css.Selector.Core.SelectorFilter
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.SelectorFilter
instance Data.String.IsString Css.Selector.Core.Hash
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.Hash
instance Data.String.IsString Css.Selector.Core.Class
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.Class
instance Data.String.IsString Css.Selector.Core.Attrib
instance Language.Haskell.TH.Syntax.Lift Css.Selector.Core.Attrib
instance Text.Blaze.ToMarkup Css.Selector.Core.Attrib
instance Text.Julius.ToJavascript Css.Selector.Core.Attrib
instance Data.Aeson.Types.ToJSON.ToJSON Css.Selector.Core.Attrib
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.Attrib
instance Data.Default.Class.Default Css.Selector.Core.AttributeCombinator
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.AttributeCombinator
instance Data.String.IsString Css.Selector.Core.AttributeName
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.AttributeName
instance Data.Default.Class.Default Css.Selector.Core.TypeSelector
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.TypeSelector
instance GHC.Base.Semigroup Css.Selector.Core.ElementName
instance GHC.Base.Monoid Css.Selector.Core.ElementName
instance Data.String.IsString Css.Selector.Core.ElementName
instance Data.Default.Class.Default Css.Selector.Core.ElementName
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.ElementName
instance GHC.Base.Semigroup Css.Selector.Core.Namespace
instance GHC.Base.Monoid Css.Selector.Core.Namespace
instance Data.String.IsString Css.Selector.Core.Namespace
instance Data.Default.Class.Default Css.Selector.Core.Namespace
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.Namespace
instance Data.Default.Class.Default Css.Selector.Core.SelectorCombinator
instance Language.Haskell.TH.Syntax.Lift Css.Selector.Core.SelectorCombinator
instance Test.QuickCheck.Arbitrary.Arbitrary Css.Selector.Core.SelectorCombinator
instance GHC.Base.Semigroup Css.Selector.Core.SelectorSpecificity
instance GHC.Base.Monoid Css.Selector.Core.SelectorSpecificity
instance GHC.Classes.Eq Css.Selector.Core.SelectorSpecificity
instance GHC.Classes.Ord Css.Selector.Core.SelectorSpecificity
instance Data.Default.Class.Default Css.Selector.Core.SelectorSpecificity


-- | A module that defines a quasiquoter to parse a string to a css
--   selector.
module Css.Selector.QuasiQuoters

-- | A quasiquoter that can be used to construct a <a>SelectorGroup</a> for
--   the given css selector. In case the css selector is invalid. A
--   compiler error will be thrown (at compile time).
csssel :: QuasiQuoter

-- | A quasiquoter that takes the content from the file, and then runs the
--   content of that file as a <a>csssel</a> quasiquote.
cssselFile :: QuasiQuoter

-- | Parse the string to a <a>SelectorGroup</a>.
parseCss :: String -> SelectorGroup


-- | A module to define css selectors by making use of a quasiquoter, and
--   manipulating these css selectors.
module Css.Selector
